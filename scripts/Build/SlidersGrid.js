"use strict";class SlidersGrid{constructor(t,i,e){this.unlockNextLevel=e,this.height=i.length,this.width=i[0].length,this.level=GlobalUtils.copyArray(PipesUtils.decodeLevel(i));for(let t=0;t<100;t++)this.shuffleLevel();this.container=document.querySelector(".grid"),this.container.innerHTML="",this.setGridSize(t),this.controls=[],this.tiles=[];const s=(this.height+2)/2|0;for(let t=0;t<this.height+2;t++){this.tiles.push([]);for(let i=0;i<this.width+2;i++){const e=GlobalUtils.createNewDOM("div");let h=!1;(0!==t&&t!==this.height+1||0!==i&&i!==this.width+1)&&(0!==t&&t!==this.height+1||i!==s)&&(0!==i&&i!==this.width+1||t!==s)?(0===t?(e.className="control up",e.addEventListener("click",(()=>this.moveColumnTop(i-1))),h=!0):0===i?(e.className="control left",e.addEventListener("click",(()=>this.moveRowLeft(t-1))),h=!0):t===this.height+1?(e.className="control down",e.addEventListener("click",(()=>this.moveColumnBottom(i-1))),h=!0):i===this.width+1&&(e.className="control right",e.addEventListener("click",(()=>this.moveRowRight(t-1))),h=!0),h?(this.container.appendChild(e),this.controls.push(e)):(this.tiles[t-1].push(new PipesTile(this.level[t-1][i-1])),this.container.appendChild(this.tiles[t-1][i-1].container))):(e.className="empty",this.container.appendChild(e))}}for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i++)if("d"===this.level[t][i][4]){const e=[`${t}${i}`];this.tiles[t][i].setConnected(PipesUtils.isConnectedToSource(t,i,this.level,e))}}setGridSize(t){this.container.className=`grid pipes size-${t}`,this.container.style.width=(this.width+2)*t+.1*(this.width+2-1)+"rem",this.container.style.height=(this.height+2)*t+.1*(this.height+2-1)+"rem",this.container.style.gridTemplateColumns=`repeat(${this.width+2}, ${t}rem)`,this.container.style.gridTemplateRows=`repeat(${this.height+2}, ${t}rem)`}shuffleLevel(){const t=GlobalUtils.randomInt(0,1),i=GlobalUtils.randomInt(0,1),e=GlobalUtils.randomInt(0,this.width-1),s=GlobalUtils.randomInt(1,this.width-1);+e!=+(this.width/2|0)&&(1===t&&1===i?this.shiftLevelColumnToBottom(e,s):1===t&&0===i?this.shiftLevelColumnToTop(e,s):0===t&&1===i?this.shiftLevelRowToRight(e,s):0===t&&0===i&&this.shiftLevelRowToLeft(e,s))}shiftLevelColumnToBottom(t,i){for(let e=0;e<i;e++){let i=this.level[this.height-1][t];for(let i=this.height-1;i>0;i--)this.level[i][t]=this.level[i-1][t];this.level[0][t]=i}}shiftLevelColumnToTop(t,i){for(let e=0;e<i;e++){let i=this.level[0][t];for(let i=0;i<this.height-1;i++)this.level[i][t]=this.level[i+1][t];this.level[this.height-1][t]=i}}shiftLevelRowToRight(t,i){for(let e=0;e<i;e++){let i=this.level[t][this.width-1];for(let i=this.width-1;i>0;i--)this.level[t][i]=this.level[t][i-1];this.level[t][0]=i}}shiftLevelRowToLeft(t,i){for(let e=0;e<i;e++){let i=this.level[t][0];for(let i=0;i<this.width-1;i++)this.level[t][i]=this.level[t][i+1];this.level[t][this.width-1]=i}}moveRowLeft(t){let i=this.tiles[t][0],e=this.level[t][0];this.container.insertBefore(this.tiles[t][0].container,this.tiles[t][this.width-1].container),this.container.insertBefore(this.tiles[t][this.width-1].container,this.tiles[t][0].container);for(let i=0;i<this.width-1;i++)this.tiles[t][i]=this.tiles[t][i+1],this.level[t][i]=this.level[t][i+1];this.tiles[t][this.width-1]=i,this.level[t][this.width-1]=e,this.tileClicked()}moveRowRight(t){let i=this.tiles[t][this.width-1],e=this.level[t][this.width-1];this.container.insertBefore(this.tiles[t][this.width-1].container,this.tiles[t][0].container);for(let i=this.width-1;i>0;i--)this.tiles[t][i]=this.tiles[t][i-1],this.level[t][i]=this.level[t][i-1];this.tiles[t][0]=i,this.level[t][0]=e,this.tileClicked()}swap(t,i){const e=i.nextElementSibling,s=i.parentNode;t.replaceWith(i),s.insertBefore(t,e)}moveColumnTop(t){let i=this.tiles[0][t],e=this.level[0][t],s=this.tiles[this.height-1][t].container;for(let i=this.height-1;i>0;i--)this.swap(this.tiles[i][t].container,this.tiles[i-1][t].container);this.swap(this.tiles[this.height-1][t].container,s);for(let i=0;i<this.height-1;i++)this.tiles[i][t]=this.tiles[i+1][t],this.level[i][t]=this.level[i+1][t];this.tiles[this.height-1][t]=i,this.level[this.height-1][t]=e,this.tileClicked()}moveColumnBottom(t){let i=this.tiles[this.height-1][t],e=this.level[this.height-1][t],s=this.tiles[0][t].container;for(let i=0;i<this.height-1;i++)this.swap(this.tiles[i][t].container,this.tiles[i+1][t].container);this.swap(this.tiles[0][t].container,s);for(let i=this.height-1;i>0;i--)this.tiles[i][t]=this.tiles[i-1][t],this.level[i][t]=this.level[i-1][t];this.tiles[0][t]=i,this.level[0][t]=e,this.tileClicked()}tileClicked(){for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i++)if("d"===this.level[t][i][4]){const e=[`${t}${i}`];this.tiles[t][i].setConnected(PipesUtils.isConnectedToSource(t,i,this.level,e))}PipesUtils.checkAllConnections(this.level)&&this.win()}win(){for(let t=0;t<this.controls.length;t++)this.controls[t].parentNode.replaceChild(this.controls[t].cloneNode(!0),this.controls[t]);this.unlockNextLevel()}}