"use strict";class BridgesEditor extends Editor{constructor(){super("bridges")}load(){this.show(),this.createGrid(),this.createIslands()}generateLevel(){this.level=BridgesUtils.generateBridgesLevel(this.grid_size,this.grid_size),this.islands=[];for(let s=0;s<=this.grid_size;s++){this.islands.push([]);for(let i=0;i<=this.grid_size;i++)this.islands[s].push(new BridgesIsland(this.level[s][i],(()=>this.addAdjacentIslands()),(t=>this.level[s][i]=t))),this.tiles[s][i].innerHTML="",this.tiles[s][i].appendChild(this.islands[s][i].container)}}changeGridSize(){super.changeGridSize(),this.islands=null,this.createIslands()}createGrid(){this.grid.innerHTML="",this.setGridSize(),this.tiles=[];for(let s=0;s<=this.grid_size;s++){this.tiles.push([]);for(let i=0;i<=this.grid_size;i++){const t=GlobalUtils.createNewDOM("div","tile");this.grid.appendChild(t),i===this.grid_size&&(t.style.width="0px"),s===this.grid_size&&(t.style.height="0px"),this.tiles[s].push(t)}}}setGridSize(){if(this.grid.className=`grid bridges size-${this.tile_size.value}`,this.grid.style.width=this.grid_size*this.tile_size.value+3+"rem",this.grid.style.height=this.grid_size*this.tile_size.value+3+"rem",this.grid.style.gridTemplateColumns=`repeat(${this.grid_size+1}, ${this.tile_size.value}rem)`,this.grid.style.gridTemplateRows=`repeat(${this.grid_size+1}, ${this.tile_size.value}rem)`,null!=this.islands)for(let s=0;s<this.grid_size;s++)for(let i=0;i<this.grid_size;i++){if(null==this.islands[s][i])continue;const t=BridgesUtils.getAdjacentIslands(this.islands,s,i);this.startBridge(this.islands[s][i],t)}}createIslands(){this.islands=[],this.level=BridgesUtils.createEmptyLevelArray(this.grid_size,this.grid_size);for(let s=0;s<=this.grid_size;s++){this.islands.push([]);for(let i=0;i<=this.grid_size;i++)this.islands[s].push(new BridgesIsland(0,(()=>this.addAdjacentIslands()),(t=>this.level[s][i]=t))),this.tiles[s][i].appendChild(this.islands[s][i].container)}window.addEventListener("mousemove",this.setClosestBridge.bind(this)),window.addEventListener("mouseup",this.addBridge.bind(this))}addAdjacentIslands(){for(let s=0;s<=this.grid_size;s++)for(let i=0;i<=this.grid_size;i++){if(!this.islands[s][i].active)continue;this.islands[s][i].blockActions();const t=BridgesUtils.getAdjacentIslands(this.islands,s,i);this.islands[s][i].addAdjacentIslands(t,((s,i)=>this.startBridge(s,i))),this.islands[s][i].just_activated&&this.islands[s][i].resetAdjacentConnections()}}startBridge(s,i){this.mouse_down=!0,this.current_island=s,this.current_adjacent_islands=i,this.target_island=s,BridgesUtils.setAdjacentBridgesSizes(this.current_island,this.current_adjacent_islands)}setClosestBridge(s){if(!this.mouse_down)return;const i=s.changedTouches;let t=[0,0];t=null==i?[s.pageY,s.pageX]:[i[0].pageY,i[0].pageX],this.target_island=BridgesUtils.getClosestIslandAndFocusBridge(this.islands,this.current_island,this.current_adjacent_islands,t)}addBridge(){this.mouse_down&&(this.mouse_down=!1,this.target_island!=this.current_island&&null!=this.target_island&&(BridgesUtils.addBridgeBetweenIslands(this.current_island,this.target_island),this.target_island=null))}}