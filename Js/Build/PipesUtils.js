"use strict";class PipesUtils{static top_connection_template=document.querySelector(".top-connection-template").content.children[0];static right_connection_template=document.querySelector(".right-connection-template").content.children[0];static bottom_connection_template=document.querySelector(".bottom-connection-template").content.children[0];static left_connection_template=document.querySelector(".left-connection-template").content.children[0];static source_template=document.querySelector(".source-template").content.children[0];static destination_template=document.querySelector(".destination-template").content.children[0];constructor(){}static makeCorrections(e){const t=e.length,n=e[0].length;let o=0;for(let c=0;c<t;c++)for(let t=0;t<n;t++)"d"==e[c][t][4]&&o++;return o<t}static decodeLevel(e){const t=e.length,n=e[0].length,o=GlobalUtils.copyArray(e),c=[8,4,2,1];for(let l=0;l<t;l++)for(let t=0;t<n;t++){let n=[0,0,0,0,e[l][t][1]];for(;o[l][t][0]>0;)for(let e=0;e<4;e++)if(o[l][t][0]-c[e]>=0){o[l][t][0]-=c[e],n[e]++;break}o[l][t]=n}return o}static encodeLevel(e){const t=e.length,n=e[0].length,o=[8,4,2,1],c=GlobalUtils.copyArray(e);for(let l=0;l<t;l++)for(let t=0;t<n;t++){let n=[0,e[l][t][4]];for(let c=0;c<4;c++)n[0]+=e[l][t][c]*o[c];c[l][t]=n}return c}static createBlock(e,t=!1){const n=e[4],o=GlobalUtils.createNewDOM("div","block"),c=GlobalUtils.createNewDOM("div","mark");for(let t=0;t<4;t++)if(e[t])switch(t){case 0:c.appendChild(this.top_connection_template.cloneNode(!0));break;case 1:c.appendChild(this.right_connection_template.cloneNode(!0));break;case 2:c.appendChild(this.bottom_connection_template.cloneNode(!0));break;case 3:c.appendChild(this.left_connection_template.cloneNode(!0))}return"s"===n?c.appendChild(this.source_template.cloneNode(!0)):"d"===n&&c.appendChild(this.destination_template.cloneNode(!0)),o.appendChild(c),t?(o.style.animation="none",c.style.animation="none"):setTimeout((()=>{o.style.animation="none",c.style.animation="none"}),500),o}static createEmptyLevelArray(e,t){const n=[];for(let o=0;o<t;o++){n.push([]);for(let t=0;t<e;t++)n[o].push([0,0,0,0,"c"])}return n}static generateNewLevel(e,t){let n=this.createEmptyLevelArray(e,t),o=[t/2|0,e/2|0];n[o[0]][o[1]]=[0,0,0,0,"s"];for(let c=0;c<e*t;c++){const c=GlobalUtils.randomInt(0,3),l=[-1,1,1,-1],r=[t,e];o[c%2]+l[c]<0&&(o[c%2]+=1),o[c%2]+l[c]>=r[c%2]&&(o[c%2]-=1),n[o[0]][o[1]][c]=1,o[c%2]+=l[c],n[o[0]][o[1]][(c+2)%4]=1}for(let o=0;o<t;o++)for(let t=0;t<e;t++){const e=n[o][t].reduce(((e,t,n)=>e+(n<4?t:0))),c=n[o][t][4];1===e&&"s"!==c&&(n[o][t][4]="d")}return this.makeCorrections(n)&&(n=this.generateNewLevel(e,t)),n}static checkCorrectConnections(e,t,n){let o=[];const c=n[e][t],l=[[0,0,0,0,"c"],[0,0,0,0,"c"],[0,0,0,0,"c"],[0,0,0,0,"c"]];e-1>=0&&(l[0]=n[e-1][t]),e+1<n[0].length&&(l[2]=n[e+1][t]),t-1>=0&&(l[3]=n[e][t-1]),t+1<n.length&&(l[1]=n[e][t+1]);for(let e=0;e<4;e++)o.push(c[e]==l[e][(e+2)%4]);return o}static checkAllConnections(e){for(let t=0;t<e.length;t++)for(let n=0;n<e[0].length;n++){const o=this.checkCorrectConnections(t,n,e);for(let e=0;e<4;e++)if(!o[e])return!1}return!0}static isConnectedToSource(e,t,n,o){if("s"===n[e][t][4])return!0;const c=this.checkCorrectConnections(e,t,n),l=[-1,0,1,0];for(let r=0;r<4;r++){const i=e+l[r],s=t+l[(r+1)%4];if(!(i<0||i>=n.length||s<0||s>=n[0].length)&&(c[r]&&n[i][s][(r+2)%4])){if(o.includes(`${i}${s}`))continue;if(o.push(`${i}${s}`),this.isConnectedToSource(i,s,n,o))return!0}}return!1}}