"use strict";class SquaresGrid{constructor(t,e,i){this.unlockNextLevel=i,this.height=e.length,this.width=e[0].length,this.level=GlobalUtils.copyArray(SquaresUtils.decodeLevel(e));for(let t=0;t<1e3;t++)this.shuffleLevel();this.container=document.querySelector(".grid"),this.container.innerHTML="",this.setGridSize(t),this.tiles=[];for(let t=0;t<this.height;t++){this.tiles.push([]);for(let e=0;e<this.width;e++)this.tiles[t].push(new SquaresTile(this.level[t][e],this.checkCorrectConnections(t,e),(()=>this.tileClicked(t,e)),((i,s)=>this.tilePositionChanged(t,e,i,s)))),this.container.appendChild(this.tiles[t][e].container)}}setGridSize(t){this.container.className=`grid squares size-${t}`,this.container.style.width=this.width*t+.1*(this.width-1)+"rem",this.container.style.height=this.height*t+.1*(this.height-1)+"rem",this.container.style.gridTemplateColumns=`repeat(${this.width}, ${t}rem)`,this.container.style.gridTemplateRows=`repeat(${this.height}, ${t}rem)`}shuffleLevel(){for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){if(this.level[t][e][4].includes("r")){const i=GlobalUtils.randomInt(0,4);for(let s=0;s<i;s++)this.rotateConnections(t,e)}let i=t,s=e;this.level[t][e][4].includes("v")&&(i+=GlobalUtils.randomInt(-this.height,this.height),i<0?i=0:i>=this.height&&(i=this.height-1)),this.level[t][e][4].includes("h")&&(s+=GlobalUtils.randomInt(-this.width,this.width),s<0?s=0:s>=this.width&&(s=this.width-1)),this.moveTile(t,e,i,s)}}moveTile(t,e,i,s){for(let t=0;t<4;t++)if(0!=this.level[i][s][t])return;const h=this.level[t][e];this.level[t][e]=this.level[i][s],this.level[i][s]=h}checkCorrectConnections(t,e){let i=[];const s=this.level[t][e],h=[[0,0,0,0,"n"],[0,0,0,0,"n"],[0,0,0,0,"n"],[0,0,0,0,"n"]];t-1>=0&&(h[0]=this.level[t-1][e]),t+1<this.width&&(h[2]=this.level[t+1][e]),e-1>=0&&(h[3]=this.level[t][e-1]),e+1<this.height&&(h[1]=this.level[t][e+1]);for(let t=0;t<4;t++)i.push(s[t]==h[t][(t+2)%4]);return i}checkAllConnections(){for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){const i=this.checkCorrectConnections(t,e);for(let t=0;t<4;t++)if(!i[t])return!1}return!0}rotateConnections(t,e){const i=this.level[t][e][3];for(let i=3;i>0;i--)this.level[t][e][i]=this.level[t][e][i-1];this.level[t][e][0]=i}updateConnections(t,e){this.tiles[t][e].setConnections(this.level[t][e],this.checkCorrectConnections(t,e));const i=[-1,0,1,0];for(let s=0;s<4;s++){const h=t+i[s],l=e+i[(s+1)%4];h>=0&&h<this.height&&l>=0&&l<this.width&&this.tiles[h][l].setConnections(this.level[h][l],this.checkCorrectConnections(h,l))}}tileClicked(t,e){this.rotateConnections(t,e),this.updateConnections(t,e),this.checkAllConnections()&&this.win()}tilePositionChanged(t,e,i,s){const h=this.level[t][e];s=(s+s%2)/2;let l=e+(i=(i+i%2)/2);l>=this.width?l=this.width-1:l<0&&(l=0);let n=t+s;n>=this.height?n=this.height-1:n<0&&(n=0);for(let t=0;t<4;t++)if(0!=this.level[n][l][t])return;this.level[t][e]=this.level[n][l],this.level[n][l]=h;const o=this.tiles[t][e].container.cloneNode();this.container.insertBefore(o,this.tiles[t][e].container),this.container.insertBefore(this.tiles[t][e].container,this.tiles[n][l].container),this.container.insertBefore(this.tiles[n][l].container,o),o.remove();const r=this.tiles[t][e];this.tiles[t][e]=this.tiles[n][l],this.tiles[n][l]=r,this.tiles[t][e].setFunctions((()=>this.tileClicked(t,e)),((i,s)=>this.tilePositionChanged(t,e,i,s))),this.tiles[n][l].setFunctions((()=>this.tileClicked(n,l)),((t,e)=>this.tilePositionChanged(n,l,t,e))),this.updateConnections(t,e),this.updateConnections(n,l),this.checkAllConnections()&&this.win()}win(){for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)this.tiles[t][e].blockActions();this.unlockNextLevel()}}