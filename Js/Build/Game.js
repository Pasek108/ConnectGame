"use strict";class Game extends View{constructor(e,t){super(".game"),View.addView(this,"game",`${url}?${e}-${t+1}`),this.mode_name=e,this.level=t,this.rules=new Rules(e),this.title=this.container.querySelector(".title"),this.grid=this.container.querySelector(".grid"),this.prev=this.container.querySelector(".prev"),this.prev.addEventListener("click",this.openPreviousLevel.bind(this)),this.next=this.container.querySelector(".next"),this.next.addEventListener("click",this.openNextLevel.bind(this)),this.reset=this.container.querySelector(".reset"),this.reset.addEventListener("click",this.resetLevel.bind(this)),this.size=this.container.querySelector(".tile-size"),this.size.addEventListener("input",this.changeSize.bind(this)),this.size.value=6,this.loadGame(this.mode_name,this.level)}openPreviousLevel(){this.level<1||(this.level-=1,this.loadGame(this.mode_name,this.level))}openNextLevel(){this.level>=199||(this.level+=1,this.loadGame(this.mode_name,this.level))}loadGame(e,t){let i=JSON.parse(localStorage.getItem("completed_levels"));this.prev.classList.remove("disabled"),this.next.classList.remove("disabled"),0===t&&this.prev.classList.add("disabled"),(199===t||t>=i[this.mode_name])&&this.next.classList.add("disabled");const s=document.querySelector(`.option[data-mode="${e}"] .${document.body.lang}`).innerText;switch(this.title.innerHTML=`<span>${s}</span>${t+1} / 200`,this.grid.innerHTML="",e){case"bridges":this.game=new BridgesGrid(this.size.value,bridges_levels[t],this.unlockNextLevel.bind(this));break;case"pipes":this.game=new PipesGrid(this.size.value,pipes_levels[t],this.unlockNextLevel.bind(this));break;case"sliders":this.game=new SlidersGrid(this.size.value,pipes_levels[t],this.unlockNextLevel.bind(this));break;case"easy":this.game=new SquaresGrid(this.size.value,easy_levels[t],this.unlockNextLevel.bind(this));break;case"normal":this.game=new SquaresGrid(this.size.value,normal_levels[t],this.unlockNextLevel.bind(this));break;case"hard":this.game=new SquaresGrid(this.size.value,hard_levels[t],this.unlockNextLevel.bind(this))}this.show()}changeSize(){this.game.setGridSize(this.size.value)}resetLevel(){this.loadGame(this.mode_name,this.level)}unlockNextLevel(){setTimeout(this.fireConfetti.bind(this),100);let e=JSON.parse(localStorage.getItem("completed_levels"));this.level<200&&this.level!==e[this.mode_name]||(this.next.classList.remove("disabled"),e[this.mode_name]++,localStorage.setItem("completed_levels",JSON.stringify(e)))}fireConfetti(){const e=[{origin:{x:.1,y:1},angle:60},{origin:{x:.9,y:1},angle:120}],t=[{particleRatio:Math.floor(50),spread:26,startVelocity:55},{particleRatio:Math.floor(40),spread:60},{particleRatio:Math.floor(70),spread:100,decay:.91,scalar:.8},{particleRatio:Math.floor(20),spread:120,startVelocity:25,decay:.92,scalar:1.2},{particleRatio:Math.floor(20),spread:120,startVelocity:45}];for(let i=0;i<e.length;i++)for(let s=0;s<t.length;s++)confetti(Object.assign({},e[i],t[s]))}removeListeners(){this.prev.replaceWith(this.prev.cloneNode(!0)),this.next.replaceWith(this.next.cloneNode(!0)),this.reset.replaceWith(this.reset.cloneNode(!0)),this.size.replaceWith(this.size.cloneNode(!0))}}